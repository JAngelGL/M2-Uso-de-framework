# -*- coding: utf-8 -*-
"""Regresion Lineal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzQww9JN-zstRBoPpNp9UVAgJUhP5zJy
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
from tensorflow.python.framework import ops
ops.reset_default_graph()
import pandas as pd
import seaborn as sns

sess = tf.Session()

columns= ["Largo de sépalo","Ancho de sépalo","Largo de pétalo","Ancho de pétalo","Especies"]
df = pd.read_csv('iris.data',names = columns)

y_vals = np.array(df["Largo de sépalo"])
x_vals = np.array(df["Ancho de pétalo"])

x_vals
y_vals

#tamaño de batch
batch_size = 25

x_data = tf.placeholder(shape=[None,1],dtype = tf.float32)
y_target = tf.placeholder(shape=[None,1],dtype = tf.float32)

A = tf.Variable(tf.random_normal(shape= [1,1]))

b = tf.Variable(tf.random_normal(shape= [1,1]))

model_output = tf.add(tf.matmul(x_data,A),b)

loss =  tf.reduce_mean(tf.square(y_target - model_output))

#declaramos el optimizador
my_opt = tf.train.GradientDescentOptimizer(0.05)
train_step = my_opt.minimize(loss)

init = tf.initialize_all_variables()
sess.run(init)

loss_vec = []
for i in range(100):
  rand_index = np.random.choice(len(x_vals),size = batch_size)
  rand_x = np.transpose([x_vals[rand_index]])
  rand_y = np.transpose([y_vals[rand_index]])
  sess.run(train_step, feed_dict = {x_data: rand_x,y_target: rand_y})
  temp_loss = sess.run(loss,feed_dict={x_data: rand_x,y_target: rand_y})
  loss_vec.append(temp_loss)
  if (i+1)%25==0:
    print("Step #" + str(i+1)+"A = " + str(sess.run(A))+ 'b = '+ str(sess.run(b)))
    print("Loss = "+ str(temp_loss))

[slope] = sess.run(A)
[y_intercept] =  sess.run(b)

best_fit = []
for i in x_vals:
  best_fit.append(slope*i+y_intercept)

plt.plot(x_vals, y_vals, 'o', label = 'Data Points')
plt.plot(x_vals, best_fit, 'r-', label = 'Mejor linea de ajusta', linewidth = 3)
plt.legend(loc = 'upper left')
plt.title('sepal length')
plt.xlabel('petal W')
plt.ylabel('Sepal L')
plt.show()

plt.plot(loss_vec, 'k-')
plt.title('L2 Loss por generacion')
plt.xlabel('Generation')
plt.ylabel('L2 Loss')
plt.show()



